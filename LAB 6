import torch 
import torch.nn as nn 
import torch.nn.functional as F 
from torchvision import datasets, transforms 
from torch.utils.data import DataLoader 
import matplotlib.pyplot as plt 
 
# Load MNIST dataset 
transform = transforms.ToTensor() 
train_set = datasets.MNIST(root='./data', train=True, download=True, transform=transform) 
test_set = datasets.MNIST(root='./data', train=False, download=True, transform=transform) 
 
train_loader = DataLoader(train_set, batch_size=64, shuffle=True) 
test_loader = DataLoader(test_set, batch_size=1000) 
 
# Simple neural network (DBN-like structure) 
class SimpleDBN(nn.Module): 
    def __init__(self): 
        super().__init__() 
        self.fc1 = nn.Linear(28*28, 256) 
        self.fc2 = nn.Linear(256, 128) 
        self.fc3 = nn.Linear(128, 10) 
 
    def forward(self, x): 
        x = x.view(-1, 28*28)      # flatten the image 
        x = F.relu(self.fc1(x))    # first hidden layer 
        x = F.relu(self.fc2(x))    # second hidden layer 
        return self.fc3(x)         # output layer 
 
# Initialize model, loss function and optimizer 
model = SimpleDBN()
criterion = nn.CrossEntropyLoss() 
optimizer = torch.optim.Adam(model.parameters(), lr=0.001) 
 
# Train the model 
print("Training...") 
for epoch in range(5): 
    for images, labels in train_loader: 
        outputs = model(images) 
        loss = criterion(outputs, labels) 
 
        optimizer.zero_grad() 
        loss.backward() 
        optimizer.step() 
    print(f"Epoch {epoch+1} complete") 
 
# Test the model 
model.eval() 
correct = 0 
total = 0 
with torch.no_grad(): 
    for images, labels in test_loader: 
        outputs = model(images) 
        _, predicted = torch.max(outputs, 1) 
        total += labels.size(0) 
        correct += (predicted == labels).sum().item() 
 
print(f"Test Accuracy: {100 * correct / total:.2f}%") 
 
# Predict and display 5 test images 
dataiter = iter(test_loader) 
images, labels = next(dataiter) 
sample_images = images[:5] 
sample_labels = labels[:5]
with torch.no_grad(): 
    outputs = model(sample_images) 
    _, preds = torch.max(outputs, 1) 
 
# Plot predictions 
for i in range(5): 
    img = sample_images[i].squeeze().numpy() 
    plt.imshow(img, cmap='gray') 
    plt.title(f"Predicted: {preds[i].item()}, Actual: {sample_labels[i].item()}") 
    plt.axis('off') 
    plt.show()
